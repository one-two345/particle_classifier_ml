# -*- coding: utf-8 -*-
"""particle_pridiction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oMMYlT0WsrHgZomIiGiFyv61rJ8ciSNi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler
from sklearn.svm import SVC
import tensorflow as tf

print("TensorFlow version:", tf.__version__)
print("Num GPUs Available:", len(tf.config.experimental.list_physical_devices('GPU')))

"""## Dataset
https://archive.ics.uci.edu/dataset/159/magic+gamma+telescope


The data set was generated by a Monte Carlo program, Corsika, described in: D. Heck et al., CORSIKA, A Monte Carlo code to simulate extensive air showers, Forschungszentrum Karlsruhe FZKA 6019 (1998). http://rexa.info/paper?id=ac6e674e9af20979b23d3ed4521f1570765e8d68
"""

from google.colab import drive
drive.mount('/content/drive')

cols = ["fLength", "fWidth", "fSize", "fConc", "fConc1", "fAsym", "fM3Long", "fM3Trans", "fAlpha", "fDist", "class"]
df = pd.read_csv("magic04.data", names=cols)
df

"""#### Encoding"""

df["class"] = (df["class"] == "g").astype(int)

df.info()

"""## Data preprocessing
#### type check
"""

df = df.apply(pd.to_numeric, errors='coerce')

"""#### removing duplicates"""

if df.duplicated().sum() > 0:
    df.drop_duplicates(inplace=True)
    print("Duplicates found and removed.")
else:
    print("There are no duplicates.")

"""#### Empty cells check"""

print(df.isnull().sum())

"""#### Outlier check"""

feature_cols = df.columns[df.columns != 'class']
feature_cols_1 = ["fSize", "fConc", "fConc1"]
df_melted = pd.melt(df, id_vars=['class'], value_vars=feature_cols_1, var_name='Feature', value_name='Value')

# Plot the boxplots
plt.figure(figsize=(15, 10))  # Adjust figure size if needed
sns.boxplot(x='Feature', y='Value', hue='class', data=df_melted)
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.title('Boxplots of Features by Class')
plt.show()

feature_cols_2 = list(set(feature_cols) - set(feature_cols_1))  # Get remaining features
df_melted_2 = pd.melt(df, id_vars=['class'], value_vars=feature_cols_2, var_name='Feature', value_name='Value')

plt.figure(figsize=(15, 10))
sns.boxplot(x='Feature', y='Value', hue='class', data=df_melted_2)
plt.xticks(rotation=45, ha='right')
plt.title('Boxplots of Remaining Features by Class')
plt.show()

"""#### correlation plot"""

correlation_matrix = df.drop(columns=['class']).corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Features')
plt.show()

"""#### Histogram plot"""

for label in cols[:-1]:
  plt.hist(df[df["class"]==1][label], color='blue', label='gamma', alpha=0.7, density=True)
  plt.hist(df[df["class"]==0][label], color='red', label='hadron', alpha=0.7, density=True)
  plt.title(label)
  plt.ylabel("Probability")
  plt.xlabel(label)
  plt.legend()
  plt.show()

"""# Data spliting"""

train, valid, test = np.split(df.sample(frac=1, random_state=42),[int(0.6 * len(df)), int(0.8 * len(df))])

def scale_dataset(dataframe, oversample=False):
  X = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  if oversample:
    ros = RandomOverSampler()
    X, y = ros.fit_resample(X, y)

  data = np.hstack((X, np.reshape(y, (-1, 1))))

  return data, X, y

train, X_train, y_train = scale_dataset(train, oversample=True)
valid, X_valid, y_valid = scale_dataset(valid, oversample=False)
test, X_test, y_test = scale_dataset(test, oversample=False)

"""# KNN"""

knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(X_train, y_train)

y_pred = knn_model.predict(X_test)

print(classification_report(y_test, y_pred))

"""# SVM"""

svm_model = SVC()
svm_model = svm_model.fit(X_train, y_train)

y_pred = svm_model.predict(X_test)
print(classification_report(y_test, y_pred))

"""# NN"""

def plot_history(history):
  fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
  ax1.plot(history.history['loss'], label='loss')
  ax1.plot(history.history['val_loss'], label='val_loss')
  ax1.set_xlabel('Epoch')
  ax1.set_ylabel('Binary crossentropy')
  ax1.grid(True)

  ax2.plot(history.history['accuracy'], label='accuracy')
  ax2.plot(history.history['val_accuracy'], label='val_accuracy')
  ax2.set_xlabel('Epoch')
  ax2.set_ylabel('Accuracy')
  ax2.grid(True)

  plt.show()

def train_model(X_train, y_train, num_nodes, dropout_prob, lr, batch_size, epochs):
    nn_model = tf.keras.Sequential([
        tf.keras.layers.Input(shape=(X_train.shape[1],)),  # Define input shape properly
        tf.keras.layers.Dense(num_nodes, activation='relu'),
        tf.keras.layers.Dropout(dropout_prob),
        tf.keras.layers.Dense(num_nodes, activation='relu'),
        tf.keras.layers.Dropout(dropout_prob),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])

    # Use 'learning_rate' instead of 'lr'
    nn_model.compile(
        optimizer=tf.keras.optimizers.Adam(learning_rate=lr),
        loss='binary_crossentropy',
        metrics=['accuracy']
    )

    history = nn_model.fit(
        X_train, y_train, epochs=epochs, batch_size=batch_size,
        validation_split=0.2, verbose=0
    )

    return nn_model, history

least_val_loss = float('inf')
least_loss_model = None
epochs=100
for num_nodes in [16, 32, 64]:
  for dropout_prob in[0, 0.2]:
    for lr in [0.01, 0.005, 0.001]:
      for batch_size in [32, 64, 128]:
        print(f"{num_nodes} nodes, dropout {dropout_prob}, lr {lr}, batch size {batch_size}")
        model, history = train_model(X_train, y_train, num_nodes, dropout_prob, lr, batch_size, epochs)
        plot_history(history)
        val_loss = model.evaluate(X_valid, y_valid)[0]
        if val_loss < least_val_loss:
          least_val_loss = val_loss
          least_loss_model = model

y_pred = least_loss_model.predict(X_test)
y_pred = (y_pred > 0.5).astype(int).reshape(-1,)

print(classification_report(y_test, y_pred))

